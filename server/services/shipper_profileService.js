// services/shipperProfileService.js
const shipperProfileDao = require("../dao/shipper_profileDao");

const shipperProfileService = {
  /**
   * ‚ûï T·∫°o h·ªì s∆° shipper m·ªõi
   * @param {object} shipperData - { user_id, vehicle_type, vehicle_number, identity_card }
   * @returns {Promise<object>}
   */
  async createShipperProfile(shipperData) {
    if (!shipperData.user_id || !shipperData.vehicle_type) {
      throw new Error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: user_id, vehicle_type");
    }
    return await shipperProfileDao.create(shipperData);
  },

  /**
   * üì¶ L·∫•y th√¥ng tin shipper theo ID h·ªì s∆°
   * @param {number} shipperId
   * @returns {Promise<object|null>}
   */
  async getShipperById(shipperId) {
    return await shipperProfileDao.findById(shipperId);
  },

  /**
   * üìç L·∫•y th√¥ng tin shipper theo user_id
   * @param {number} userId
   * @returns {Promise<object|null>}
   */
  async getShipperByUserId(userId) {
    return await shipperProfileDao.getByUserId(userId);
  },

  /**
   * üìú L·∫•y to√†n b·ªô h·ªì s∆° shipper
   * @returns {Promise<object[]>}
   */
  async getAllShippers() {
    return await shipperProfileDao.findAll();
  },

  /**
   * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° shipper
   * @param {number} shipperId
   * @param {object} updateData
   * @returns {Promise<object>}
   */
  async updateShipper(shipperId, updateData) {
    const existing = await shipperProfileDao.findById(shipperId);
    if (!existing) {
      throw new Error("H·ªì s∆° shipper kh√¥ng t·ªìn t·∫°i");
    }
    return await shipperProfileDao.update(shipperId, updateData);
  },

  /**
   * üóëÔ∏è X√≥a h·ªì s∆° shipper
   * @param {number} shipperId
   * @returns {Promise<boolean>}
   */
  async deleteShipper(shipperId) {
    const existing = await shipperProfileDao.findById(shipperId);
    if (!existing) {
      throw new Error("H·ªì s∆° shipper kh√¥ng t·ªìn t·∫°i");
    }
    return await shipperProfileDao.delete(shipperId);
  },

  /**
   * üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i online/offline/busy
   * @param {number} shipperId
   * @param {"online"|"offline"|"busy"} status
   * @returns {Promise<object>}
   */
  async updateOnlineStatus(shipperId, status) {
    const existing = await shipperProfileDao.findById(shipperId);
    if (!existing) {
      throw new Error("H·ªì s∆° shipper kh√¥ng t·ªìn t·∫°i");
    }
    return await shipperProfileDao.updateOnlineStatus(shipperId, status);
  },

  /**
   * üìç C·∫≠p nh·∫≠t v·ªã tr√≠ hi·ªán t·∫°i c·ªßa shipper
   * @param {number} shipperId
   * @param {number} latitude
   * @param {number} longitude
   * @returns {Promise<object>}
   */
  async updateLocation(shipperId, latitude, longitude) {
    const existing = await shipperProfileDao.findById(shipperId);
    if (!existing) {
      throw new Error("H·ªì s∆° shipper kh√¥ng t·ªìn t·∫°i");
    }
    return await shipperProfileDao.updateLocation(shipperId, latitude, longitude);
  },

  /**
   * üì∂ L·∫•y danh s√°ch shipper theo tr·∫°ng th√°i online_status
   * @param {"online"|"offline"|"busy"} status
   * @returns {Promise<object[]>}
   */
  async getShippersByOnlineStatus(status) {
    return await shipperProfileDao.getByOnlineStatus(status);
  },

  /**
   * üöö L·∫•y danh s√°ch shipper s·∫µn s√†ng nh·∫≠n ƒë∆°n (online + approved)
   * @returns {Promise<object[]>}
   */
  async getAvailableShippers() {
    return await shipperProfileDao.getAvailableShippers();
  },

  /**
   * @async
   * @function deleteShipperProfile
   * @description X√≥a h·ªì s∆° shipper (khi user b·ªã x√≥a ho·∫∑c kh√¥ng c√≤n ho·∫°t ƒë·ªông)
   * @param {number} shipperId - ID shipper
   * @returns {Promise<object>} - H·ªì s∆° shipper ƒë√£ x√≥a
   */
  async deleteShipperProfile(shipperId) {
    try {
      return await shipperProfileDao.delete("id", shipperId);
    } catch (err) {
      console.error("‚ùå Error deleting shipper profile:", err.message);
      throw new Error("Kh√¥ng th·ªÉ x√≥a h·ªì s∆° shipper.");
    }
  },

  /**
   * @async
   * @function getShipperStatistics
   * @description L·∫•y th·ªëng k√™ hi·ªáu su·∫•t c·ªßa shipper (t·ªïng ƒë∆°n, ho√†n th√†nh, thu nh·∫≠p, rating)
   * @param {number} shipperId - ID shipper profile
   * @returns {Promise<object>} - Th·ªëng k√™ hi·ªáu su·∫•t
   */
  async getShipperStatistics(shipperId) {
    try {
      return await shipperProfileDao.getStatistics(shipperId);
    } catch (err) {
      console.error("‚ùå Error fetching shipper statistics:", err.message);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ shipper.");
    }
  },

  /**
   * @async
   * @function getEarningsByPeriod
   * @description L·∫•y doanh thu c·ªßa shipper theo kho·∫£ng th·ªùi gian
   * @param {number} shipperId - ID shipper profile
   * @param {string} period - "today", "week", "month", "all"
   * @returns {Promise<object>} - Doanh thu v√† danh s√°ch chi ti·∫øt
   */
  async getEarningsByPeriod(shipperId, period = "month") {
    try {
      return await shipperProfileDao.getEarningsByPeriod(shipperId, period);
    } catch (err) {
      console.error("‚ùå Error fetching shipper earnings:", err.message);
      throw new Error("Kh√¥ng th·ªÉ l·∫•y doanh thu shipper.");
    }
  },
};

module.exports = shipperProfileService;
