// controllers/shopController.js
const shopService = require("../services/shop_profileService");

/**
 * üè™ T·∫°o h·ªì s∆° c·ª≠a h√†ng m·ªõi (role = 'shop')
 */
exports.createShopProfile = async (req, res) => {
  try {
    // ‚úÖ Fix: Accept c·∫£ userId v√† user_id
    const { userId, user_id, ...shopData } = req.body;
    const finalUserId = userId || user_id;
    
    if (!finalUserId) {
      return res.status(400).json({ success: false, message: "Thi·∫øu userId ho·∫∑c user_id" });
    }

    const result = await shopService.createShopProfile(finalUserId, shopData);
    res.status(201).json({ success: true, data: result });
  } catch (err) {
    console.error("[ShopController:createShopProfile]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üìã L·∫•y danh s√°ch t·∫•t c·∫£ c·ª≠a h√†ng
 */
exports.getAllShops = async (req, res) => {
  try {
    const shops = await shopService.getAllShops();
    res.status(200).json({ success: true, data: shops });
  } catch (err) {
    console.error("[ShopController:getAllShops]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üîç L·∫•y th√¥ng tin chi ti·∫øt c·ª≠a h√†ng (·∫©n ID kh·ªèi URL)
 *  ‚Üí frontend g·ª≠i shopId trong body
 */
exports.getShopDetail = async (req, res) => {
  try {
    const { shopId } = req.body;
    if (!shopId) {
      return res.status(400).json({ success: false, message: "Thi·∫øu shopId trong body" });
    }

    const data = await shopService.getShopDetail(shopId);
    res.status(200).json({ success: true, data });
  } catch (err) {
    console.error("[ShopController:getShopDetail]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üîç L·∫•y th√¥ng tin c·ª≠a h√†ng theo ID
 */
exports.getShopById = async (req, res) => {
  try {
    const { id } = req.params;
    const shop = await shopService.getShopById(id);
    if (!shop) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng" });
    }
    res.status(200).json({ success: true, data: shop });
  } catch (err) {
    console.error("[ShopController:getShopById]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin c·ª≠a h√†ng
 */
exports.updateShopInfo = async (req, res) => {
  try {
    const { id } = req.params;
    const updatedShop = await shopService.updateShopInfo(id, req.body);
    if (!updatedShop) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng" });
    }
    res.status(200).json({ success: true, data: updatedShop });
  } catch (err) {
    console.error("[ShopController:updateShopInfo]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üîÑ Thay ƒë·ªïi tr·∫°ng th√°i c·ª≠a h√†ng (open/closed/pending)
 */
exports.updateShopStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    const updated = await shopService.updateShopStatus(id, status);
    res.status(200).json({ success: true, data: updated });
  } catch (err) {
    console.error("[ShopController:updateShopStatus]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üìç L·∫•y danh s√°ch c·ª≠a h√†ng g·∫ßn ng∆∞·ªùi d√πng
 */
exports.getNearbyShops = async (req, res) => {
  try {
    // ‚úÖ Fix: ƒê·ªçc t·ª´ body v√¨ route d√πng POST
    const { latitude, longitude, radiusKm, radius } = req.body;
    if (!latitude || !longitude) {
      return res.status(400).json({ success: false, message: "Thi·∫øu t·ªça ƒë·ªô ng∆∞·ªùi d√πng" });
    }

    const shops = await shopService.getNearbyShops(
      parseFloat(latitude),
      parseFloat(longitude),
      parseFloat(radiusKm || radius) || 5
    );
    res.status(200).json({ success: true, data: shops });
  } catch (err) {
    console.error("[ShopController:getNearbyShops]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * üè† G√°n ƒë·ªãa ch·ªâ cho c·ª≠a h√†ng
 */
exports.assignAddressToShop = async (req, res) => {
  try {
    const { shopId, addressId } = req.body;
    if (!shopId || !addressId) {
      return res.status(400).json({ success: false, message: "Thi·∫øu shopId ho·∫∑c addressId" });
    }

    const updated = await shopService.assignAddressToShop(shopId, addressId);
    res.status(200).json({ success: true, data: updated });
  } catch (err) {
    console.error("[ShopController:assignAddressToShop]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};

/**
 * ‚ùå X√≥a c·ª≠a h√†ng
 */
exports.deleteShop = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await shopService.deleteShop(id);
    if (!deleted) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng" });
    }

    res.status(200).json({ success: true, message: "ƒê√£ x√≥a c·ª≠a h√†ng th√†nh c√¥ng" });
  } catch (err) {
    console.error("[ShopController:deleteShop]", err.message);
    res.status(500).json({ success: false, message: err.message });
  }
};


