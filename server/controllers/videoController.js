// controllers/videoController.js
const videoService = require("../services/videoService");

/**
 * ‚ûï T·∫°o video m·ªõi
 */
const createVideo = async (req, res) => {
  try {
    const videoData = req.body;
    const newVideo = await videoService.createVideo(videoData);

    res.status(201).json({
      success: true,
      message: "T·∫°o video th√†nh c√¥ng",
      data: newVideo,
    });
  } catch (error) {
    console.error("‚ùå [createVideo] L·ªói:", error);
    res.status(400).json({ success: false, message: error.message });
  }
};

/**
 * üì¶ L·∫•y t·∫•t c·∫£ video
 */
const getAllVideos = async (req, res) => {
  try {
    const videos = await videoService.getAllVideos();
    res.status(200).json({
      success: true,
      count: videos.length,
      data: videos,
    });
  } catch (error) {
    console.error("‚ùå [getAllVideos] L·ªói:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

/**
 * üîç L·∫•y video theo ID
 */
const getVideoById = async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const video = await videoService.getVideoById(id);

    if (!video)
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y video" });

    res.status(200).json({ success: true, data: video });
  } catch (error) {
    console.error("‚ùå [getVideoById] L·ªói:", error);
    res.status(400).json({ success: false, message: error.message });
  }
};

/**
 * ‚úèÔ∏è C·∫≠p nh·∫≠t video
 */
const updateVideo = async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const updateData = req.body;
    const updated = await videoService.updateVideo(id, updateData);

    res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t video th√†nh c√¥ng",
      data: updated,
    });
  } catch (error) {
    console.error("‚ùå [updateVideo] L·ªói:", error);
    res.status(400).json({ success: false, message: error.message });
  }
};

/**
 * üóëÔ∏è X√≥a video
 */
const deleteVideo = async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const deleted = await videoService.deleteVideo(id);

    if (!deleted)
      return res.status(404).json({ success: false, message: "Video kh√¥ng t·ªìn t·∫°i" });

    res.status(200).json({ success: true, message: "ƒê√£ x√≥a video th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå [deleteVideo] L·ªói:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

/**
 * üìú L·∫•y t·∫•t c·∫£ video c·ªßa user
 */
const getVideosByUser = async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const videos = await videoService.getVideosByUser(userId);

    res.status(200).json({
      success: true,
      count: videos.length,
      data: videos,
    });
  } catch (error) {
    console.error("‚ùå [getVideosByUser] L·ªói:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

/**
 * üè™ L·∫•y video theo shop
 */
const getVideosByShop = async (req, res) => {
  try {
    const shopId = parseInt(req.params.shopId);
    const videos = await videoService.getVideosByShop(shopId);

    res.status(200).json({
      success: true,
      count: videos.length,
      data: videos,
    });
  } catch (error) {
    console.error("‚ùå [getVideosByShop] L·ªói:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

/**
 * üî• L·∫•y video ph·ªï bi·∫øn nh·∫•t
 */
const getMostLikedVideos = async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 10;
    const videos = await videoService.getMostLikedVideos(limit);

    res.status(200).json({
      success: true,
      count: videos.length,
      data: videos,
    });
  } catch (error) {
    console.error("‚ùå [getMostLikedVideos] L·ªói:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

/**
 * üîç T√¨m ki·∫øm video theo ti√™u ƒë·ªÅ/m√¥ t·∫£
 */
const searchVideos = async (req, res) => {
  try {
    const keyword = req.query.q || "";
    const limit = parseInt(req.query.limit) || 20;
    const offset = parseInt(req.query.offset) || 0;

    const results = await videoService.searchVideos(keyword, limit, offset);

    res.status(200).json({
      success: true,
      count: results.length,
      data: results,
    });
  } catch (error) {
    console.error("‚ùå [searchVideos] L·ªói:", error);
    res.status(400).json({ success: false, message: error.message });
  }
};

/**
 * üìà TƒÉng l∆∞·ª£t xem video
 */
const incrementViews = async (req, res) => {
  try {
    const id = parseInt(req.params.id);
    const updatedVideo = await videoService.incrementViews(id);

    res.status(200).json({
      success: true,
      message: "ƒê√£ tƒÉng l∆∞·ª£t xem video",
      data: updatedVideo,
    });
  } catch (error) {
    console.error("‚ùå [incrementViews] L·ªói:", error);
    res.status(400).json({ success: false, message: error.message });
  }
};

/**
 * üÜï L·∫•y video m·ªõi nh·∫•t
 */
const getLatestVideos = async (req, res) => {
  try {
    const limit = parseInt(req.query.limit) || 10;
    const videos = await videoService.getLatestVideos(limit);

    res.status(200).json({
      success: true,
      count: videos.length,
      data: videos,
    });
  } catch (error) {
    console.error("‚ùå [getLatestVideos] L·ªói:", error);
    res.status(500).json({ success: false, message: "L·ªói server" });
  }
};

/**
 * üó∫Ô∏è L·∫•y video g·∫ßn v·ªã tr√≠ ng∆∞·ªùi d√πng (feed 10km)
 */
const getVideosFeed = async (req, res) => {
  try {
    const { lat, lng } = req.query;
    if (!lat || !lng)
      return res.status(400).json({ message: "Thi·∫øu t·ªça ƒë·ªô ng∆∞·ªùi d√πng" });

    const videos = await videoService.getNearbyVideos({
      lat: parseFloat(lat),
      lng: parseFloat(lng),
    });

    res.status(200).json({
      success: true,
      message: "L·∫•y danh s√°ch video g·∫ßn b·∫°n",
      count: videos.length,
      data: videos.slice(0, 10),
    });
  } catch (error) {
    console.error("‚ùå [getVideosFeed] L·ªói:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

/**
 * ‚è≠Ô∏è L·∫•y video k·∫ø ti·∫øp trong feed
 */
const getNextVideo = async (req, res) => {
  try {
    const { lat, lng, viewed } = req.query;
    if (!lat || !lng)
      return res.status(400).json({ message: "Thi·∫øu t·ªça ƒë·ªô ng∆∞·ªùi d√πng" });

    const viewedIds = viewed ? viewed.split(",").map(Number) : [];
    const videos = await videoService.getNearbyVideos({
      lat: parseFloat(lat),
      lng: parseFloat(lng),
    });

    const next = videos.find(v => !viewedIds.includes(v.video_id));
    if (!next) return res.status(404).json({ message: "Kh√¥ng c√≤n video m·ªõi" });

    res.status(200).json({ success: true, data: next });
  } catch (error) {
    console.error("‚ùå [getNextVideo] L·ªói:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// ‚úÖ Export t·∫•t c·∫£ controller
module.exports = {
  createVideo,
  getAllVideos,
  getVideoById,
  updateVideo,
  deleteVideo,
  getVideosByUser,
  getVideosByShop,
  getMostLikedVideos,
  searchVideos,
  incrementViews,
  getLatestVideos,
  getVideosFeed,
  getNextVideo,
};
