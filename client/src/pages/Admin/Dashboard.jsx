import React, { useEffect, useState } from "react";
import {
  Typography,
  Box,
  Grid,
  Paper,
  Stack,
  Avatar,
  Chip,
  CircularProgress,
  Select,
  MenuItem,
} from "@mui/material";
import {
  getOverviewStats,
  getWeeklyOrders,
  getUserDistribution,
} from "../../api/adminApi";
import BarChartMini from "../../components/admin/charts/BarChartMini";
import LineChartMini from "../../components/admin/charts/LineChartMini";
import PieChartMini from "../../components/admin/charts/PieChartMini";

const Dashboard = () => {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [activeMonths, setActiveMonths] = useState(6); // ch·ªçn s·ªë th√°ng
  const [year, setYear] = useState(new Date().getFullYear()); // l·ªçc nƒÉm ƒë·∫∑t ·ªü Dashboard

  // Danh s√°ch nƒÉm: ch·ªâ t·ªõi nƒÉm hi·ªán t·∫°i (v√≠ d·ª• 5 nƒÉm g·∫ßn nh·∫•t)
  const years = React.useMemo(() => {
    const cur = new Date().getFullYear();
    return Array.from({ length: 5 }, (_, i) => cur - i); // [cur, cur-1, ...]
  }, []);

  // L·∫•y d·ªØ li·ªáu t·ªïng quan khi load
  useEffect(() => {
    const fetchData = async () => {
      try {
        const overview = await getOverviewStats();
        setStats(overview);
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu dashboard:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="50vh">
        <CircularProgress />
      </Box>
    );
  }

  // Th·∫ª th·ªëng k√™ nh·ªè
  const StatCard = ({ title, value, sub, icon }) => (
    <Paper
      elevation={0}
      sx={{
        p: 2,
        borderRadius: 2,
        border: "1px solid",
        borderColor: "divider",
        height: "100%",
        display: "flex",
        flexDirection: "column",
        justifyContent: "space-between",
      }}
    >
      <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
        <Box>
          <Typography variant="subtitle2" color="text.secondary">
            {title}
          </Typography>
          <Typography variant="h5" sx={{ mt: 0.5 }}>
            {value ?? "‚Äî"}
          </Typography>
          <Typography variant="caption" color="success.main">
            {sub}
          </Typography>
        </Box>
        {icon}
      </Stack>
    </Paper>
  );

  return (
    <Box>
      {/* Ti√™u ƒë·ªÅ */}
      <Typography variant="h4" sx={{ fontWeight: 700, mb: 0.5 }}>
        Dashboard T·ªïng quan
      </Typography>
      <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
        T·ªïng quan v·ªÅ ho·∫°t ƒë·ªông v√† hi·ªáu qu·∫£ kinh doanh h·ªá th·ªëng giao ƒë·ªì ƒÉn
      </Typography>

      {/* 4 Th·∫ª th·ªëng k√™ */}
      <Grid
        container
        spacing={2}
        sx={{
          display: "flex",
          justifyContent: "space-between",
          flexWrap: "nowrap",
          mb: 3,
        }}
      >
        <Grid item xs={12} sm={6} md={3} sx={{ flex: 1 }}>
          <StatCard
            title="T·ªïng doanh thu"
            value={
              stats?.total_revenue
                ? `‚Ç´ ${Number(stats.total_revenue).toLocaleString("vi-VN")}`
                : "‚Ç´ 0"
            }
            sub="T·ªïng doanh thu t·ª´ ƒë∆°n ho√†n t·∫•t"
            icon={<Avatar sx={{ bgcolor: "#FFF1EC", color: "primary.main" }}>üí∞</Avatar>}
          />
        </Grid>

        <Grid item xs={12} sm={6} md={3} sx={{ flex: 1 }}>
          <StatCard
            title="T·ªïng ƒë∆°n h√†ng"
            value={stats?.total_orders ?? 0}
            sub="ƒê∆°n h√†ng ho√†n th√†nh"
            icon={<Avatar sx={{ bgcolor: "#FFF1EC", color: "primary.main" }}>üì¶</Avatar>}
          />
        </Grid>

        <Grid item xs={12} sm={6} md={3} sx={{ flex: 1 }}>
          <StatCard
            title="Kh√°ch h√†ng"
            value={stats?.total_customers ?? 0}
            sub="Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng k√Ω"
            icon={<Avatar sx={{ bgcolor: "#FFF1EC", color: "primary.main" }}>üë§</Avatar>}
          />
        </Grid>

        <Grid item xs={12} sm={6} md={3} sx={{ flex: 1 }}>
          <StatCard
            title="C·ª≠a h√†ng / Shipper"
            value={`${stats?.total_shops ?? 0} / ${stats?.total_shippers ?? 0}`}
            sub="T·ªïng s·ªë c·ª≠a h√†ng & shipper"
            icon={<Avatar sx={{ bgcolor: "#FFF1EC", color: "primary.main" }}>üöö</Avatar>}
          />
        </Grid>
      </Grid>

      {/* Bi·ªÉu ƒë·ªì doanh thu & ƒë∆°n h√†ng */}
      <Grid container spacing={2} sx={{ flexWrap: "nowrap" }}>
        {/* üí∞ Bi·ªÉu ƒë·ªì doanh thu */}
        <Grid item xs={12} sm={6} md={6} sx={{ flex: 1, minWidth: 0 }}>
          <Paper
            elevation={0}
            sx={{
              p: 2,
              borderRadius: 2,
              border: "1px solid",
              borderColor: "divider",
              height: "100%",
            }}
          >
            <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ mb: 1 }}>
              <Typography variant="subtitle1" fontWeight={600}>
                Doanh thu theo th√°ng
              </Typography>

              {/* C√πng h√†ng: 6 th√°ng / 12 th√°ng / NƒÉm */}
              <Stack direction="row" spacing={1} alignItems="center">
                <Chip
                  size="small"
                  label="6 th√°ng"
                  color={activeMonths === 6 ? "primary" : "default"}
                  variant={activeMonths === 6 ? "filled" : "outlined"}
                  onClick={() => setActiveMonths(6)}
                />
                <Chip
                  size="small"
                  label="12 th√°ng"
                  color={activeMonths === 12 ? "primary" : "default"}
                  variant={activeMonths === 12 ? "filled" : "outlined"}
                  onClick={() => setActiveMonths(12)}
                />
                <Select
                  size="small"
                  value={year}
                  onChange={(e) => setYear(e.target.value)}
                  sx={{ height: 28, ml: 1 }}
                >
                  {years.map((y) => (
                    <MenuItem key={y} value={y}>
                      NƒÉm {y}
                    </MenuItem>
                  ))}
                </Select>
              </Stack>
            </Stack>

            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
              Th·ªëng k√™ doanh thu g·∫ßn ƒë√¢y
            </Typography>

            <BarChartMini months={activeMonths} year={year} />
          </Paper>
        </Grid>

        {/* üì¶ Bi·ªÉu ƒë·ªì ƒë∆°n h√†ng */}
        <Grid item xs={12} sm={6} md={6} sx={{ flex: 1, minWidth: 0 }}>
          <Paper
            elevation={0}
            sx={{
              p: 2,
              borderRadius: 2,
              border: "1px solid",
              borderColor: "divider",
              height: "100%",
            }}
          >
            <Stack direction="row" alignItems="center" justifyContent="space-between" sx={{ mb: 1 }}>
              <Typography variant="subtitle1" fontWeight={600}>
                ƒê∆°n h√†ng trong tu·∫ßn
              </Typography>
              <Stack direction="row" spacing={1}>
                <Chip size="small" label="Tu·∫ßn n√†y" color="primary" variant="outlined" />
                <Chip size="small" label="Tu·∫ßn tr∆∞·ªõc" variant="outlined" />
              </Stack>
            </Stack>
            <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
              S·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo ng√†y
            </Typography>
            <LineChartMini fetchData={getWeeklyOrders} />
          </Paper>
        </Grid>
      </Grid>

      {/* Ph√¢n b·ªë ng∆∞·ªùi d√πng & ho·∫°t ƒë·ªông */}
      <Box sx={{ mt: 3 }}>
        <Grid container spacing={2} sx={{ flexWrap: "nowrap" }}>
          <Grid item xs={12} md={6} lg={6} sx={{ flex: 1, minWidth: 0 }}>
            <Paper
              elevation={0}
              sx={{
                p: 2,
                borderRadius: 2,
                border: "1px solid",
                borderColor: "divider",
                height: "100%",
              }}
            >
              <Typography variant="subtitle1" gutterBottom fontWeight={600}>
                Ph√¢n b·ªë ng∆∞·ªùi d√πng
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                T·ª∑ l·ªá kh√°ch h√†ng, c·ª≠a h√†ng v√† shipper
              </Typography>
              <PieChartMini fetchData={getUserDistribution} />
            </Paper>
          </Grid>

          <Grid item xs={12} md={6} lg={6} sx={{ flex: 1, minWidth: 0 }}>
            <Paper
              elevation={0}
              sx={{
                p: 2,
                borderRadius: 2,
                border: "1px solid",
                borderColor: "divider",
                height: "100%",
              }}
            >
              <Typography variant="subtitle1" gutterBottom fontWeight={600}>
                Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                C√°c s·ª± ki·ªán m·ªõi nh·∫•t trong h·ªá th·ªëng
              </Typography>
              <Stack spacing={1}>
                {[
                  'C·ª≠a h√†ng "Ph·ªü H√† N·ªôi" ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng',
                  "Shipper Nguy·ªÖn VƒÉn A ƒë√£ ho√†n th√†nh 10 ƒë∆°n h√†ng",
                  "C√≥ 3 ƒëƒÉng k√Ω shipper ch·ªù duy·ªát",
                  "Doanh thu h√¥m nay ƒë√£ ƒë·∫°t 45 tri·ªáu VND",
                ].map((txt, idx) => (
                  <Stack key={idx} direction="row" spacing={1} alignItems="center">
                    <Box
                      sx={{
                        width: 8,
                        height: 8,
                        bgcolor: ["success.main", "info.main", "warning.main", "secondary.main"][idx],
                        borderRadius: "50%",
                      }}
                    />
                    <Typography variant="body2">{txt}</Typography>
                    <Chip
                      size="small"
                      label={["5 ph√∫t tr∆∞·ªõc", "15 ph√∫t tr∆∞·ªõc", "30 ph√∫t tr∆∞·ªõc", "1 gi·ªù tr∆∞·ªõc"][idx]}
                      variant="outlined"
                    />
                  </Stack>
                ))}
              </Stack>
            </Paper>
          </Grid>
        </Grid>
      </Box>
    </Box>
  );
};

export default Dashboard;
